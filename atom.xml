<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1024-HOPE</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-14T03:36:01.426Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhangweilong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>APT</title>
    <link href="http://yoursite.com/2019/01/10/apt/"/>
    <id>http://yoursite.com/2019/01/10/apt/</id>
    <published>2019-01-10T02:04:33.799Z</published>
    <updated>2019-01-14T03:36:01.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="APT-概念了解"><a href="#APT-概念了解" class="headerlink" title="APT-概念了解"></a>APT-概念了解</h2><p>友情链接：</p><p><a href="https://lizhaoxuan.github.io/2016/07/17/apt-Grammar-explanation/" target="_blank" rel="noopener">https://lizhaoxuan.github.io/2016/07/17/apt-Grammar-explanation/</a></p><p><a href="https://github.com/Gavin-ZYX/APTTest.git" target="_blank" rel="noopener">https://github.com/Gavin-ZYX/APTTest.git</a></p><h3 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h3><p><strong>APT(Annotation Processing Tool)</strong>是一种处理注释的工具，它对源代码文件进行检测找出其中的Annotation，根据注释自动生成代码。Annotation处理器在出来Annotation时可以根据源文件中的Annotation生成额外的源文件和其它的文件（文件具体内容由Annotation处理器的编写者决定），APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件。</p><h3 id="annotationProcessor"><a href="#annotationProcessor" class="headerlink" title="annotationProcessor"></a>annotationProcessor</h3><p>annotationProcessor是<strong>APT工具</strong>中的一种，他是<strong>google</strong>开发的内置框架，不需要引入，可以直接在build.gradle文件中使用</p><h3 id="android-apt"><a href="#android-apt" class="headerlink" title="android-apt"></a>android-apt</h3><p>android-apt是由一位开发者自己开发的<strong>apt框架</strong>，源代码托管在这里，随着Android Gradle 插件 2.2 版本的发布，Android Gradle 插件提供了名为 annotationProcessor 的功能来完全代替 android-apt ，自此android-apt 作者在官网发表声明最新的Android Gradle插件现在已经支持annotationProcessor，并警告和或阻止android-apt ，并推荐大家使用 Android 官方插件annotationProcessor。</p><h2 id="Demo-知识点"><a href="#Demo-知识点" class="headerlink" title="Demo-知识点"></a>Demo-知识点</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><blockquote><p>@Retention</p></blockquote><ul><li>@Retention(RetentionPolicy.SOURCE) 源码时注解，一般用来作为编译器标记。就比如Override, Deprecated, SuppressWarnings这样的注解</li><li>@Retention(RetentionPolicy.RUNTIME) 运行时注解，一般在运行时通过反射去识别的注解</li><li>@Retention(RetentionPolicy.CLASS) 编译时注解，在编译时处理</li></ul><blockquote><p>@Target</p></blockquote><ul><li>@Target(ElementType.TYPE) 接口、类、枚举、注解</li><li>@Target(ElementType.FIELD)字段、枚举的常量</li><li>@Target(ElementType.METHOD) 方法</li><li>@Target(ElementType.PARAMETER) 方法参数</li><li>@Target(ElementType.CONSTRUCTOR) 构造函数</li><li>@Target(ElementType.LOCAL_VARIABLE) 局部变量</li><li>@Target(ElementType.ANNOTATION_TYPE) 注解</li><li>@Target(ElementType.package) 包</li></ul><blockquote><p>@Inherited</p></blockquote><p>该注解的字面意识是继承，但你要知道注解是不可以继承的。<br>ie:当你的注解定义到类A上，此时，有个B类继承A，且没使用该注解。但是扫描的时候，会把A类设置的注解，扫描到B类上</p><h3 id="输出Log"><a href="#输出Log" class="headerlink" title="输出Log"></a>输出Log</h3><blockquote><p>Messager</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//取得Messager对象</span><br><span class="line">Messager messager = processingEnv.getMessager();</span><br></pre></td></tr></table></figure><p>Processor日志输出的位置在编译器下方的Messages窗口中</p><p>Processor支持最基础的<strong>System.out</strong>方法</p><p>同样Processor也有自己的Log输出工具: Messager</p><p>同Log类似，Messager也有<strong>日志级别</strong>的选择</p><ul><li>Diagnostic.Kind.ERROR</li><li>Diagnostic.Kind.WARNING</li><li>Diagnostic.Kind.MANDATORY_WARNING</li><li>Diagnostic.Kind.NOTE</li><li>Diagnostic.Kind.OTHER</li></ul><h3 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Represents a program element such as a package, class, or method.</span><br><span class="line">Each element represents a static, language-level construct (and not, for example, a runtime construct of the virtual machine).</span><br><span class="line">表示一个程序元素，比如包、类或者方法</span><br></pre></td></tr></table></figure><blockquote><p>ExecutableElement</p></blockquote><p>表示某个类或接口的<strong>方法</strong>、<strong>构造方法</strong>或<strong>初始化程序</strong>（静态或实例），包括注释类型元素。</p><p>对应<strong>@Target(ElementType.METHOD)</strong> <strong>@Target(ElementType.CONSTRUCTOR)</strong></p><blockquote><p>PackageElement;</p></blockquote><p>表示一个<strong>包程序元素</strong>。提供对有关包极其成员的信息访问。</p><p>对应<strong>@Target(ElementType.PACKAGE)</strong></p><blockquote><p>TypeElement;</p></blockquote><p>表示一个<strong>类</strong>或<strong>接口</strong>程序元素。提供对有关类型极其成员的信息访问。</p><p>对应<strong>@Target(ElementType.TYPE)</strong></p><p>注意：枚举类型是一种类，而注解类型是一种接口。</p><blockquote><p>TypeParameterElement;</p></blockquote><p>表示一般类、接口、方法或构造方法元素的<strong>类型参数</strong>。</p><p>对应<strong>@Target(ElementType.PARAMETER)</strong></p><blockquote><p>VariableElement;</p></blockquote><p>表示一个<strong>字段</strong>、<strong>enum常量</strong>、方法或构造方法<strong>参数</strong>、<strong>局部变量</strong>或<strong>异常参数</strong>。</p><p>对应<strong>@Target(ElementType.LOCAL_VARIABLE)</strong></p><h3 id="修饰方法的注解和ExecutableElement"><a href="#修饰方法的注解和ExecutableElement" class="headerlink" title="修饰方法的注解和ExecutableElement"></a>修饰方法的注解和ExecutableElement</h3><p>当你有一个注解是以@Target(ElementType.METHOD)定义时，表示该注解只能修饰方法。</p><p>那么这个时候你为了生成代码，而需要获取一些基本信息：包名、类名、方法名、参数类型、返回值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//OnceClick.class 以 @Target(ElementType.METHOD)修饰</span><br><span class="line">for (Element element : roundEnv.getElementsAnnotatedWith(OnceClick.class)) &#123;</span><br><span class="line">    //对于Element直接强转</span><br><span class="line">    ExecutableElement executableElement = (ExecutableElement) element;</span><br><span class="line"></span><br><span class="line">    //非对应的Element，通过getEnclosingElement转换获取</span><br><span class="line">    TypeElement classElement = (TypeElement) element</span><br><span class="line">                .getEnclosingElement();</span><br><span class="line"></span><br><span class="line">    //当(ExecutableElement) element成立时，使用(PackageElement) element</span><br><span class="line">    //            .getEnclosingElement();将报错。</span><br><span class="line">    //需要使用elementUtils来获取</span><br><span class="line">    Elements elementUtils = processingEnv.getElementUtils();</span><br><span class="line">    PackageElement packageElement = elementUtils.getPackageOf(classElement);</span><br><span class="line"></span><br><span class="line">    //全类名</span><br><span class="line">    String fullClassName = classElement.getQualifiedName().toString();</span><br><span class="line">    //类名</span><br><span class="line">    String className = classElement.getSimpleName().toString();</span><br><span class="line">    //包名</span><br><span class="line">    String packageName = packageElement.getQualifiedName().toString();</span><br><span class="line">    //方法名</span><br><span class="line">    String methodName = executableElement.getSimpleName().toString();</span><br><span class="line"></span><br><span class="line">    //取得方法参数列表</span><br><span class="line">    List&lt;? extends VariableElement&gt; methodParameters = executableElement.getParameters();</span><br><span class="line">    //参数类型列表</span><br><span class="line">    List&lt;String&gt; types = new ArrayList&lt;&gt;();</span><br><span class="line">    for (VariableElement variableElement : methodParameters) &#123;</span><br><span class="line">        TypeMirror methodParameterType = variableElement.asType();</span><br><span class="line">        if (methodParameterType instanceof TypeVariable) &#123;</span><br><span class="line">            TypeVariable typeVariable = (TypeVariable) methodParameterType;</span><br><span class="line">            methodParameterType = typeVariable.getUpperBound();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //参数名</span><br><span class="line">        String parameterName = variableElement.getSimpleName().toString();</span><br><span class="line">        //参数类型</span><br><span class="line">        String parameteKind = methodParameterType.toString();</span><br><span class="line">        types.add(methodParameterType.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰属性、类成员的注解和VariableElement"><a href="#修饰属性、类成员的注解和VariableElement" class="headerlink" title="修饰属性、类成员的注解和VariableElement"></a>修饰属性、类成员的注解和VariableElement</h3><p>当你有一个注解是以@Target(ElementType.FIELD)定义时，表示该注解只能修饰属性、类成员。</p><p>那么这个时候你为了生成代码，而需要获取一些基本信息：包名、类名、类成员类型、类成员名</p><p>如何获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">for (Element element : roundEnv.getElementsAnnotatedWith(IdProperty.class)) &#123;</span><br><span class="line">    //ElementType.FIELD注解可以直接强转VariableElement</span><br><span class="line">    VariableElement variableElement = (VariableElement) element;</span><br><span class="line"></span><br><span class="line">    TypeElement classElement = (TypeElement) element</span><br><span class="line">            .getEnclosingElement();</span><br><span class="line">    PackageElement packageElement = elementUtils.getPackageOf(classElement);</span><br><span class="line">    //类名</span><br><span class="line">    String className = classElement.getSimpleName().toString();</span><br><span class="line">    //包名</span><br><span class="line">    String packageName = packageElement.getQualifiedName().toString();</span><br><span class="line">    //类成员名</span><br><span class="line">    String variableName = variableElement.getSimpleName().toString();</span><br><span class="line"></span><br><span class="line">    //类成员类型</span><br><span class="line">    TypeMirror typeMirror = variableElement.asType();</span><br><span class="line">    String type = typeMirror.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰类的注解和TypeElement"><a href="#修饰类的注解和TypeElement" class="headerlink" title="修饰类的注解和TypeElement"></a>修饰类的注解和TypeElement</h3><p>当你有一个注解是以@Target(ElementType.TYPE)定义时，表示该注解只能修饰类、接口、枚举。</p><p>那么这个时候你为了生成代码，而需要获取一些基本信息：包名、类名、全类名、父类。</p><p>如何获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for (Element element : roundEnv.getElementsAnnotatedWith(xxx.class)) &#123;</span><br><span class="line">    //ElementType.TYPE注解可以直接强转TypeElement</span><br><span class="line">    TypeElement classElement = (TypeElement) element;</span><br><span class="line"></span><br><span class="line">    PackageElement packageElement = (PackageElement) element</span><br><span class="line">                .getEnclosingElement();</span><br><span class="line"></span><br><span class="line">    //全类名</span><br><span class="line">    String fullClassName = classElement.getQualifiedName().toString();</span><br><span class="line">    //类名</span><br><span class="line">    String className = classElement.getSimpleName().toString();</span><br><span class="line">    //包名</span><br><span class="line">    String packageName = packageElement.getQualifiedName().toString();</span><br><span class="line">     //父类名</span><br><span class="line">     String superClassName = classElement.getSuperclass().toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-annotation (java-library)</span><br><span class="line">apt-processor  (java-library)</span><br><span class="line">apt-library    (com.android.library)</span><br></pre></td></tr></table></figure><h3 id="apt-annotation"><a href="#apt-annotation" class="headerlink" title="apt-annotation"></a>apt-annotation</h3><blockquote><p>注解类BindView(编译时注解)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.CLASS)</span><br><span class="line">@Target(ElementType.FIELD)</span><br><span class="line">public @interface BindView &#123;</span><br><span class="line">    int value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>build.gradle</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;java-library&apos;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceCompatibility = &quot;1.7&quot;</span><br><span class="line">targetCompatibility = &quot;1.7&quot;</span><br></pre></td></tr></table></figure><h3 id="apt-processor"><a href="#apt-processor" class="headerlink" title="apt-processor"></a>apt-processor</h3><blockquote><p>build.gradle</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;java-library&apos;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</span><br><span class="line">    implementation &apos;com.google.auto.service:auto-service:1.0-rc2&apos;</span><br><span class="line">    implementation &apos;com.squareup:javapoet:1.10.0&apos;</span><br><span class="line">    implementation project(&apos;:apt-annotation&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceCompatibility = &quot;1.7&quot;</span><br><span class="line">targetCompatibility = &quot;1.7&quot;</span><br></pre></td></tr></table></figure><blockquote><p>AbstractProcessor</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@SupportedAnnotationTypes(&#123;&quot;com.example.gavin.apt_annotation.BindView&quot;&#125;)</span><br><span class="line">@AutoService(Processor.class)</span><br><span class="line">public class TestProcessor extends AbstractProcessor &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public synchronized void init(ProcessingEnvironment processingEnvironment) &#123;</span><br><span class="line">    super.init(processingEnvironment);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public Set&lt;String&gt; getSupportedAnnotationTypes() &#123;</span><br><span class="line">    return super.getSupportedAnnotationTypes();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public SourceVersion getSupportedSourceVersion() &#123;</span><br><span class="line">    return super.getSupportedSourceVersion();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public boolean process(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加自己需要处理的注解，可以通过两种方式：getSupportedAnnotationTypes()或者直接用注解<br>@SupportedAnnotationTypes(“全路径”)</p><blockquote><p>process方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mMessager.printMessage(Diagnostic.Kind.NOTE, &quot;processing...&quot;);</span><br><span class="line">// 1.会执行多次，所以要先clear</span><br><span class="line">    mProxyMap.clear();</span><br><span class="line">    // 2.得到所有的注解并收集到map中</span><br><span class="line">    Set&lt;? extends Element&gt; elements = roundEnvironment.getElementsAnnotatedWith(BindView.class);</span><br><span class="line">    for (Element element : elements) &#123;</span><br><span class="line">      VariableElement variableElement = (VariableElement) element;</span><br><span class="line">      TypeElement classElement = (TypeElement) variableElement.getEnclosingElement();</span><br><span class="line">      String fullClassName = classElement.getQualifiedName().toString();</span><br><span class="line"></span><br><span class="line">      //elements的信息保存到mProxyMap中</span><br><span class="line">      ClassCreatorProxy proxy = mProxyMap.get(fullClassName);</span><br><span class="line">      if (proxy == null) &#123;</span><br><span class="line">        proxy = new ClassCreatorProxy(mElementUtils, classElement);</span><br><span class="line">        mProxyMap.put(fullClassName, proxy);</span><br><span class="line">      &#125;</span><br><span class="line">      BindView bindAnnotation = variableElement.getAnnotation(BindView.class);</span><br><span class="line">      int id = bindAnnotation.value();</span><br><span class="line">      proxy.putElement(id, variableElement);</span><br><span class="line">    &#125;</span><br><span class="line">    // 3.通过遍历mProxyMap，创建java文件 通过javapoet生成</span><br><span class="line">    for (String key : mProxyMap.keySet()) &#123;</span><br><span class="line">      ClassCreatorProxy proxyInfo = mProxyMap.get(key);</span><br><span class="line">      JavaFile javaFile = JavaFile.builder(proxyInfo.getPackageName(), proxyInfo.generateJavaCode2()).build();</span><br><span class="line">      try &#123;</span><br><span class="line">        //　生成文件</span><br><span class="line">        javaFile.writeTo(mFiler);</span><br><span class="line">      &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mMessager.printMessage(Diagnostic.Kind.NOTE, &quot;process finish ...&quot;);</span><br><span class="line">    return true;</span><br></pre></td></tr></table></figure><h2 id="第三方库分析"><a href="#第三方库分析" class="headerlink" title="第三方库分析"></a>第三方库分析</h2><h3 id="ButterKnife"><a href="#ButterKnife" class="headerlink" title="ButterKnife"></a>ButterKnife</h3><h3 id="Arouter"><a href="#Arouter" class="headerlink" title="Arouter"></a>Arouter</h3><h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;APT-概念了解&quot;&gt;&lt;a href=&quot;#APT-概念了解&quot; class=&quot;headerlink&quot; title=&quot;APT-概念了解&quot;&gt;&lt;/a&gt;APT-概念了解&lt;/h2&gt;&lt;p&gt;友情链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lizhaoxuan.githu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/01/09/hello-world/"/>
    <id>http://yoursite.com/2019/01/09/hello-world/</id>
    <published>2019-01-09T13:57:38.096Z</published>
    <updated>2019-01-10T03:27:27.309Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="直接下面一句话："><a href="#直接下面一句话：" class="headerlink" title="直接下面一句话："></a>直接下面一句话：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>随笔1</title>
    <link href="http://yoursite.com/2019/01/09/tags/%E9%9A%8F%E7%AC%941/"/>
    <id>http://yoursite.com/2019/01/09/tags/随笔1/</id>
    <published>2019-01-09T13:57:38.096Z</published>
    <updated>2019-01-11T02:36:48.312Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="直接下面一句话："><a href="#直接下面一句话：" class="headerlink" title="直接下面一句话："></a>直接下面一句话：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
